package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.domain.DomainInstance;
import ru.itmo.wp.model.exception.RepositoryException;

import javax.sql.DataSource;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Supplier;

public abstract class AbstractBasicRepository<T extends DomainInstance> {
    private final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();
    private final String CAN_NOT_FIND_EXCEPTION_MESSAGE;
    private final String CAN_NOT_SAVE_EXCEPTION_MESSAGE;

    Supplier<T> instanceConstructor;

    public AbstractBasicRepository(String name, Supplier<T> instanceConstructor) {
        this.CAN_NOT_FIND_EXCEPTION_MESSAGE = "Can't find" + name;
        this.CAN_NOT_SAVE_EXCEPTION_MESSAGE = "Can't save" + name;
        this.instanceConstructor = instanceConstructor;
    }

    protected void save(T instance, String request, Object... args) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(
                    request,
                    Statement.RETURN_GENERATED_KEYS
            )) {
                setStatementArgs(statement, args);
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException(CAN_NOT_SAVE_EXCEPTION_MESSAGE);
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        setGeneratedFields(instance, generatedKeys);
                    } else {
                        throw new RepositoryException(CAN_NOT_SAVE_EXCEPTION_MESSAGE + "[no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException(CAN_NOT_SAVE_EXCEPTION_MESSAGE, e);
        }
    }

    protected T findByParams(String request, Object... params) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(request)) {
                for (int i = 0; i < params.length; i++) {
                    statement.setObject(i + 1, params[i]);
                }
                try (ResultSet resultSet = statement.executeQuery()) {
                    return toInstance(statement.getMetaData(), resultSet);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException(CAN_NOT_FIND_EXCEPTION_MESSAGE, e);
        }
    }

    private T toInstance(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException {
        if (!resultSet.next()) {
            return null;
        }

        T instance = instanceConstructor.get();
        for (int i = 1; i <= metaData.getColumnCount(); i++) {
            String instanceMethodName = "set" + metaData.getColumnName(i).substring(0, 1).toUpperCase() +
                    metaData.getColumnName(i).substring(1);
            try {
                Object[] methods = Arrays.stream(instance.getClass().getDeclaredMethods())
                        .filter(it -> it.getName().equals(instanceMethodName)).toArray();
                if (methods.length > 0) {
                    Method method = (Method) methods[0];
                    method.invoke(instance, resultSet.getObject(i));
                }
            } catch (IllegalAccessException | InvocationTargetException e) {
                throw new RepositoryException("Can not create " + instance.getClass().getName(), e);
            }
        }

        return instance;
    }

    protected List<T> findAllWithParams(String request, Object... params) {
        List<T> instances = new ArrayList<>();
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(request)) {
                for (int i = 0; i < params.length; i++) {
                    statement.setObject(i + 1, params[i]);
                }
                try (ResultSet resultSet = statement.executeQuery()) {
                    T instance;
                    while ((instance = toInstance(statement.getMetaData(), resultSet)) != null) {
                        instances.add(instance);
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException(CAN_NOT_FIND_EXCEPTION_MESSAGE, e);
        }
        return instances;
    }

    public Long findCount(String request) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(
                    request
            )) {
                try (ResultSet resultSet = statement.executeQuery()) {
                    if (resultSet.next()) {
                        return resultSet.getLong(1);
                    } else {
                        return null;
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException(CAN_NOT_FIND_EXCEPTION_MESSAGE + " amount", e);
        }
    }


    protected void setGeneratedFields(T instance, ResultSet generatedKeys) throws SQLException {
        instance.setId(generatedKeys.getLong(1));
        try {
            Method method = this.getClass().getMethod("find", long.class);
            Object invoke = method.invoke(this, instance.getId());
            if (invoke instanceof DomainInstance) {
                instance.setCreationTime(((DomainInstance) invoke).getCreationTime());
            } else {
                throw new RepositoryException(CAN_NOT_FIND_EXCEPTION_MESSAGE);
            }
        } catch (NoSuchMethodException e) {
            // No operations.
        } catch (InvocationTargetException | IllegalAccessException e) {
            throw new RepositoryException(CAN_NOT_FIND_EXCEPTION_MESSAGE, e);
        }
    }

    private void setStatementArgs(PreparedStatement statement, Object[] args) throws SQLException {
        for (int i = 0; i < args.length; i++) {
            statement.setObject(i + 1, args[i]);
        }
    }
}
