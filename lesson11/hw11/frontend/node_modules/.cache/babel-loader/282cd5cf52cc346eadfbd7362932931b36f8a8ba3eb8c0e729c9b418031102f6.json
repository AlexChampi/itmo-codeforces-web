{"ast":null,"code":"export default {\n  name: \"WriteComment\",\n  data: function () {\n    return {\n      text: \"\",\n      error: \"\",\n      jwt: localStorage.getItem(\"jwt\")\n    };\n  },\n  props: [\"post\"],\n  methods: {\n    onWriteComment: function () {\n      this.$root.$emit(\"onWriteComment\", this.post, this.text, this.jwt);\n    }\n  },\n  beforeCreate() {\n    this.$root.$on(\"onWriteCommentValidationError\", error => this.error = error);\n    this.$root.$on(\"onWriteCommentSuccess\", () => {\n      this.error = \"\";\n      this.text = \"\";\n    });\n  }\n};","map":{"version":3,"mappings":"AAuBA;EACAA;EACAC;IACA;MACAC;MACAC;MACAC;IACA;EACA;EACAC;EACAC;IACAC;MACA;IACA;EACA;EACAC;IACA;IACA;MAAA;MAAA;IAAA;EACA;AACA","names":["name","data","text","error","jwt","props","methods","onWriteComment","beforeCreate"],"sourceRoot":"src/components/page","sources":["WriteComment.vue"],"sourcesContent":["<template>\n  <div v-if=\"jwt\" class=\"writeComment form-box\">\n    <div class=\"header\">Write comment</div>\n    <div class=\"body\">\n      <form @submit.prevent=\"onWriteComment\">\n        <div class=\"field\">\n          <div class=\"name\">\n            <label for=\"login\">Text</label>\n          </div>\n          <div class=\"value\">\n            <input autofocus id=\"login\" name=\"login\" v-model=\"text\"/>\n          </div>\n        </div>\n        <div class=\"field error\">{{ error }}</div>\n        <div class=\"button-field\">\n          <input type=\"submit\" value=\"Write\">\n        </div>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"WriteComment\",\n  data: function () {\n    return {\n      text: \"\",\n      error: \"\",\n      jwt: localStorage.getItem(\"jwt\"),\n    }\n  },\n  props: [\"post\"],\n  methods: {\n    onWriteComment: function () {\n      this.$root.$emit(\"onWriteComment\", this.post, this.text, this.jwt);\n    },\n  },\n  beforeCreate() {\n    this.$root.$on(\"onWriteCommentValidationError\", (error) => this.error = error);\n    this.$root.$on(\"onWriteCommentSuccess\", () => { this.error = \"\"; this.text = \"\"});\n  },\n}\n</script>\n\n<style scoped>\n.writeComment {\n  margin-top: 2rem;\n  margin-bottom: 2rem;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}